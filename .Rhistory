print("Hello World")
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
LETTERS
set.seed(1)
sample(LETTERS)
set.seed(1)
sample(LETTERS)
set.seed(1)
sample(LETTERS)
set.seed(1)
sample(LETTERS)
sample(LETTERS)
sample(LETTERS)
set.seed(1)
sample(LETTERS)
set.seed(1)
sample(LETTERS)
set.seed(1)
heights <- rnorm(100, mean = 170, sd = 10)
heights
str(x)
x <- rnorm(100, mean=2, sd=4)
str(x)
data("airquality")
data("airquality")
str(airquality)
gc()
s <- split(airquality, airquality($month))
s <- split(airquality, airquality(month))
data("airquality")
s <- split(airquality, airquality(month))
str(lm)
system.time()
system.time(readline("instagram.com"))
system.time(readline(https://staging-oboms.tayabascity.com/application))
system.time(readline("https://staging-oboms.tayabascity.com"))
install.packages(c("httr", "jsonlite"))
library(httr)
library(jsonlite)
>> res = GET("https://api.open-notify.org/astros.json")
res = GET("https://api.open-notify.org/astros.json")
library(httr)
library(jsonlite)
res = GET("13.239.184.136")
library(httr)
library(jsonlite)
res = GET("13.239.184.136")
library(httr)
library(jsonlite)
res = GET("https://13.239.184.136")
install.packages(c("httr", "jsonlite", "tidyverse"))
library(httr)
url <- "https://api.example.com/data"
response <- GET(url)
install.packages(c("httr", "jsonlite", "tidyverse"))
library(httr)
url <- "http://13.239.184.136/users"
response <- GET(url)
library(httr)
url <- "http://13.239.184.136/users"
response <- GET(url)
library(httr)
url <- "http://13.239.184.136/users"
response <- GET(url)
library(httr)
url <- "13.239.184.136/users"
response <- GET(url)
library(httr)
url <- "13.239.184.136/users"
response <- GET(url)
library(httr)
url <- "13.239.184.136/users"
response <- GET(url)
library(httr)
url <- "13.239.184.136/users"
response <- GET(url)
library(httr)
url <- "13.239.184.136/users"
response <- GET(url)
library(httr)
url <- "13.239.184.136/users"
response <- GET(url)
library(httr)
url <- "13.239.184.136/users"
response <- GET(url)
library(httr)
url <- "13.239.184.136/users"
response <- GET(url)
library(httr)
url <- "13.239.184.136/users"
response <- GET(url)
library(httr)
url <- "13.239.184.136/users"
response <- GET(url)
library(httr)
url <- "13.239.184.136/users"
response <- GET(url)
response <- GET(url)
library(httr)
"Hello World"
library(datasets)
data(iris)
?iris
library(datasets)
data(iris)
?iris
force(iris)
library(datasets)
library(datasets)
data(iris)
?iris
iris_dt <- as.data.table(iris)
library(datasets)
data(iris)
?iris
irisSpecies == "virginica",round(mean(Sepal.Length)) ]
library(datasets)
data(iris)
?iris
iris[Species == "virginica",round(mean(Sepal.Length)) ]
library(datasets)
data(iris)
?iris
iris[Species == "virginica",round(mean("Sepal.Length")) ]
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL  # This will store the cached inverse
# Function to set the matrix
set <- function(y) {
x <<- y
inv <<- NULL  # Reset inverse cache when the matrix is updated
}
# Function to get the matrix
get <- function() x
# Function to set the inverse
setinverse <- function(inverse) inv <<- inverse
# Function to get the inverse
getinverse <- function() inv
# Return a list of the above functions
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
# If inverse is already cached, return it
if(!is.null(inv)) {
message("getting cached inverse")
return(inv)
}
# Otherwise, compute the inverse
mat <- x$get()
inv <- solve(mat, ...)
x$setinverse(inv)  # Cache the inverse
inv
}
my_matrix <- makeCacheMatrix(matrix(c(2, 1, 1, 2), 2, 2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(c(2, 1, 1, 2), 2, 2))
my_matrix
my_matrix <- makeCacheMatrix(matrix(c(2, 1, 1, 2), 2, 2))
my_matrix
my_matrix <- makeCacheMatrix(matrix(c(2, 1, 1, 2), 2, 2))
my_matrix
cacheSolve(my_matrix)
cacheSolve(my_matrix)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
j <- NULL
set <- function(y){
x <<- y
j <<- NULL
}
get <- function()x
setInverse <- function(inverse) j <<- inverse
getInverse <- function() j
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
j <- x$getInverse()
if(!is.null(j)){
message("getting cached data")
return(j)
}
mat <- x$get()
j <- solve(mat,...)
x$setInverse(j)
j
}
my_matrix <- makeCacheMatrix(matrix(c(2, 1, 1, 2), 2, 2))
my_matrix
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(c(2, 1, 1, 2), 2, 2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(c(2, 1, 1, 2), 2, 2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
setwd("C:/Users/admin/OneDrive/Documents/deepfake-detection-model")
source("scripts/preprocessing.R")
source("scripts/models.R")
source("scripts/main.R")
pip install scipy
source("scripts/main.R")
reticulate::py_config()
reticulate::py_install("scipy")
source("scripts/main.R")
reticulate::py_install("scipy")
source("scripts/main.R")
source("scripts/fine_tuning.R")
source("scripts/evaluation.R")
source("scripts/main.R")
source("scripts/evaluation.R")
